---
jobs:
- name: deploy-staging-bosh
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: bosh-config
      trigger: true
    - get: bosh-release
      trigger: true
    - get: uaa-release
      trigger: true
    - get: cpi-release
      trigger: true
    - get: bosh-stemcell
    - get: common-staging
      trigger: true
    - get: common-releases-tooling-version
      passed: [common-releases-tooling]
  - task: bosh-manifest
    file: pipeline-tasks/spiff-merge.yml
    config:
      inputs:
        - name: pipeline-tasks
        - name: bosh-config
        - name: common-staging
    params:
      OUTPUT_FILE: spiff-merge/manifest.yml
      SOURCE_FILE: bosh-config/bosh-deployment.yml
      MERGE_FILES: common-staging/secrets.yml
  - put: stagingbosh-deployment
    params:
      cert: common-staging/boshCA.crt
      manifest: spiff-merge/manifest.yml
      releases:
        - bosh-release/*.tgz
        - uaa-release/*.tgz
        - cpi-release/*.tgz
      stemcells:
        - bosh-stemcell/*.tgz
    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED to deploy Staging BOSH
          <$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Successfully deployed Staging BOSH
          <$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}

- name: common-releases-staging
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: stagingbosh-certificate
    - get: cg-s3-fisma-release
      trigger: true
    - get: cg-s3-tripwire-release
      trigger: true
    - get: cg-s3-awslogs-release
      trigger: true
    - get: cg-s3-nessus-agent-release
      trigger: true
    - get: cg-s3-newrelic-release
      trigger: true
    - get: cg-s3-clamav-release
      trigger: true
    - get: cg-s3-snort-release
      trigger: true
    - get: cg-s3-riemannc-release
      trigger: true
    - get: stagingbosh-deployment
      passed: [deploy-staging-bosh]
  - aggregate:
    - task: upload-fisma
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-fisma-release
        certificate: stagingbosh-certificate
      params: &bosh-params-staging
        BOSH_USERNAME: {{stagingbosh-username}}
        BOSH_PASSWORD: {{stagingbosh-password}}
        BOSH_TARGET: {{stagingbosh-target}}
        BOSH_CERT: bosh.pem
    - task: upload-tripwire
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-tripwire-release
        certificate: stagingbosh-certificate
      params:
        <<: *bosh-params-staging
    - task: upload-awslogs
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-awslogs-release
        certificate: stagingbosh-certificate
      params:
        <<: *bosh-params-staging
    - task: upload-nessus-agent
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-nessus-agent-release
        certificate: stagingbosh-certificate
      params:
        <<: *bosh-params-staging
    - task: upload-newrelic
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-newrelic-release
        certificate: stagingbosh-certificate
      params:
        <<: *bosh-params-staging
    - task: upload-clamav
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-clamav-release
        certificate: stagingbosh-certificate
      params:
        <<: *bosh-params-staging
    - task: upload-snort
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-snort-release
        certificate: stagingbosh-certificate
      params:
        <<: *bosh-params-staging
    - task: upload-riemannc
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-riemannc-release
        certificate: stagingbosh-certificate
      params:
        <<: *bosh-params-staging

- name: deploy-production-bosh
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: bosh-config
      trigger: true
      passed: [deploy-staging-bosh]
    - get: bosh-release
      trigger: true
      passed: [deploy-staging-bosh]
    - get: uaa-release
      trigger: true
      passed: [deploy-staging-bosh]
    - get: cpi-release
      trigger: true
      passed: [deploy-staging-bosh]
    - get: bosh-stemcell
      passed: [deploy-staging-bosh]
    - get: common-releases-tooling-version
      passed: [common-releases-tooling]
    - get: common-production
      trigger: true
  - task: bosh-manifest
    file: pipeline-tasks/spiff-merge.yml
    config:
      inputs:
        - name: pipeline-tasks
        - name: bosh-config
        - name: common-production
    params:
      OUTPUT_FILE: spiff-merge/manifest.yml
      SOURCE_FILE: bosh-config/bosh-deployment.yml
      MERGE_FILES: common-production/secrets.yml
  - put: productionbosh-deployment
    params:
      cert: common-production/boshCA.crt
      manifest: spiff-merge/manifest.yml
      releases:
        - bosh-release/*.tgz
        - uaa-release/*.tgz
        - cpi-release/*.tgz
      stemcells:
        - bosh-stemcell/*.tgz
    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED to deploy production BOSH
          <$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Successfully deployed production BOSH
          <$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}

- name: common-releases-production
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: productionbosh-certificate
    - get: cg-s3-fisma-release
      trigger: true
    - get: cg-s3-tripwire-release
      trigger: true
    - get: cg-s3-awslogs-release
      trigger: true
    - get: cg-s3-nessus-agent-release
      trigger: true
    - get: cg-s3-newrelic-release
      trigger: true
    - get: cg-s3-clamav-release
      trigger: true
    - get: cg-s3-snort-release
      trigger: true
    - get: cg-s3-riemannc-release
      trigger: true
    - get: productionbosh-deployment
      passed: [deploy-production-bosh]
  - aggregate:
    - task: upload-fisma
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-fisma-release
        certificate: productionbosh-certificate
      params: &bosh-params-prod
        BOSH_USERNAME: {{productionbosh-username}}
        BOSH_PASSWORD: {{productionbosh-password}}
        BOSH_TARGET: {{productionbosh-target}}
        BOSH_CERT: bosh.pem
    - task: upload-tripwire
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-tripwire-release
        certificate: productionbosh-certificate
      params:
        <<: *bosh-params-prod
    - task: upload-awslogs
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-awslogs-release
        certificate: productionbosh-certificate
      params:
        <<: *bosh-params-prod
    - task: upload-nessus-agent
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-nessus-agent-release
        certificate: productionbosh-certificate
      params:
        <<: *bosh-params-prod
    - task: upload-newrelic
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-newrelic-release
        certificate: productionbosh-certificate
      params:
        <<: *bosh-params-prod
    - task: upload-clamav
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-clamav-release
        certificate: productionbosh-certificate
      params:
        <<: *bosh-params-prod
    - task: upload-snort
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-snort-release
        certificate: productionbosh-certificate
      params:
        <<: *bosh-params-prod
    - task: upload-riemannc
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-riemannc-release
        certificate: productionbosh-certificate
      params:
        <<: *bosh-params-prod

- name: deploy-tooling-bosh
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: bosh-config
    - get: bosh-release
    - get: uaa-release
    - get: cpi-release
    - get: bosh-stemcell
    - get: common-tooling
      trigger: true
    - get: common-releases-master-version
      passed: [common-releases-master]
  - task: bosh-manifest
    file: pipeline-tasks/spiff-merge.yml
    config:
      inputs:
        - name: pipeline-tasks
        - name: bosh-config
        - name: common-tooling
    params:
      OUTPUT_FILE: spiff-merge/manifest.yml
      SOURCE_FILE: bosh-config/bosh-deployment.yml
      MERGE_FILES: common-tooling/secrets.yml
  - put: toolingbosh-deployment
    params:
      manifest: spiff-merge/manifest.yml
      releases:
        - bosh-release/*.tgz
        - uaa-release/*.tgz
        - cpi-release/*.tgz
      stemcells:
        - bosh-stemcell/*.tgz
    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED to deploy Tooling BOSH
          <$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Successfully deployed Tooling BOSH
          <$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}

- name: common-releases-tooling
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: common-tooling
    - get: cg-s3-fisma-release
      trigger: true
    - get: cg-s3-tripwire-release
      trigger: true
    - get: cg-s3-awslogs-release
      trigger: true
    - get: cg-s3-nessus-agent-release
      trigger: true
    - get: cg-s3-newrelic-release
      trigger: true
    - get: cg-s3-clamav-release
      trigger: true
    - get: cg-s3-snort-release
      trigger: true
    - get: cg-s3-riemannc-release
      trigger: true
    - get: toolingbosh-deployment
      passed: [deploy-tooling-bosh]
  - aggregate:
    - task: upload-fisma
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-fisma-release
        certificate: common-tooling
      params: &bosh-params-tooling
        BOSH_USERNAME: {{toolingbosh-username}}
        BOSH_PASSWORD: {{toolingbosh-password}}
        BOSH_TARGET: {{toolingbosh-target}}
        BOSH_CERT: boshCA.crt
    - task: upload-tripwire
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-tripwire-release
        certificate: common-tooling
      params:
        <<: *bosh-params-tooling
    - task: upload-awslogs
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-awslogs-release
        certificate: common-tooling
      params:
        <<: *bosh-params-tooling
    - task: upload-nessus-agent
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-nessus-agent-release
        certificate: common-tooling
      params:
        <<: *bosh-params-tooling
    - task: upload-newrelic
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-newrelic-release
        certificate: common-tooling
      params:
        <<: *bosh-params-tooling
    - task: upload-clamav
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-clamav-release
        certificate: common-tooling
      params:
        <<: *bosh-params-tooling
    - task: upload-snort
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-snort-release
        certificate: common-tooling
      params:
        <<: *bosh-params-tooling
    - task: upload-riemannc
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-riemannc-release
        certificate: common-tooling
      params:
        <<: *bosh-params-tooling
  - put: common-releases-tooling-version
    params: {bump: patch}

- name: common-releases-master
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: common-masterbosh
    - get: cg-s3-fisma-release
      trigger: true
    - get: cg-s3-tripwire-release
      trigger: true
    - get: cg-s3-awslogs-release
      trigger: true
    - get: cg-s3-nessus-agent-release
      trigger: true
    - get: cg-s3-newrelic-release
      trigger: true
    - get: cg-s3-clamav-release
      trigger: true
    - get: cg-s3-snort-release
      trigger: true
    - get: cg-s3-riemannc-release
      trigger: true
    - get: masterbosh-deployment
      passed: [deploy-master-bosh]
  - aggregate:
    - task: upload-fisma
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-fisma-release
        certificate: common-masterbosh
      params: &bosh-params-master
        BOSH_USERNAME: {{masterbosh-username}}
        BOSH_PASSWORD: {{masterbosh-password}}
        BOSH_TARGET: {{masterbosh-target}}
    - task: upload-tripwire
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-tripwire-release
        certificate: common-masterbosh
      params:
        <<: *bosh-params-master
    - task: upload-awslogs
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-awslogs-release
        certificate: common-masterbosh
      params:
        <<: *bosh-params-master
    - task: upload-nessus-agent
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-nessus-agent-release
        certificate: common-masterbosh
      params:
        <<: *bosh-params-master
    - task: upload-newrelic
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-newrelic-release
        certificate: common-masterbosh
      params:
        <<: *bosh-params-master
    - task: upload-clamav
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-clamav-release
        certificate: common-masterbosh
      params:
        <<: *bosh-params-master
    - task: upload-snort
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-snort-release
        certificate: common-masterbosh
      params:
        <<: *bosh-params-master
    - task: upload-riemannc
      file: pipeline-tasks/upload-release.yml
      input_mapping:
        release: cg-s3-riemannc-release
        certificate: common-masterbosh
      params:
        <<: *bosh-params-master
  - put: common-releases-master-version
    params: {bump: patch}

- name: deploy-master-bosh
  serial: true
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: bosh-init-config
      trigger: true
    - get: common-masterbosh
      trigger: true
  - task: bosh-manifest
    file: pipeline-tasks/spiff-merge.yml
    config:
      inputs:
        - name: pipeline-tasks
        - name: bosh-init-config
        - name: common-masterbosh
    params:
      OUTPUT_FILE: spiff-merge/manifest.yml
      SOURCE_FILE: bosh-init-config/bosh-init-deployment.yml
      MERGE_FILES: common-masterbosh/secrets.yml
  - task: decrypt-private-key
    file: pipeline-tasks/decrypt.yml
    config:
      inputs:
        - name: pipeline-tasks
        - name: common-masterbosh
    params:
      INPUT_FILE: common-masterbosh/boshCA.crt
      OUTPUT_FILE: decrypt/bosh-init.pem
      PASSPHRASE: {{masterbosh-secrets-passphrase}}
  - put: masterbosh-deployment
    params:
      manifest_file: spiff-merge/manifest.yml
      key_file: decrypt/bosh-init.pem
      stats_file_key: master-bosh-state.json
    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED to deploy Master BOSH
          <$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Successfully deployed Master BOSH
          <$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}

resources:
- name: common-tooling
  type: cg-common
  source:
    bucket_name: {{production-bucket-name}}
    region: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: tooling-bosh.yml
    secrets_passphrase: {{tooling-secrets-passphrase}}
    bosh_cert: bosh-tooling.pem

- name: common-staging
  type: cg-common
  source:
    bucket_name: {{production-bucket-name}}
    region: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: staging-bosh.yml
    secrets_passphrase: {{staging-secrets-passphrase}}
    bosh_cert: bosh-tooling.pem

- name: common-production
  type: cg-common
  source:
    bucket_name: {{production-bucket-name}}
    region: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: prod-bosh.yml
    secrets_passphrase: {{prod-secrets-passphrase}}
    bosh_cert: bosh-tooling.pem

- name: common-masterbosh
  type: cg-common
  source:
    bucket_name: {{production-bucket-name}}
    region: {{aws-region}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: master-bosh.yml
    secrets_passphrase: {{masterbosh-secrets-passphrase}}
    bosh_cert: master-bosh.pem

- name: bosh-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/bosh

- name: uaa-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/uaa-release

- name: cpi-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/bosh-aws-cpi-release

- name: bosh-config
  type: git
  source:
    uri: https://github.com/18F/cg-deploy-bosh.git
    branch: master
    paths:
    - bosh-deployment.yml

- name: bosh-init-config
  type: git
  source:
    uri: https://github.com/18F/cg-deploy-bosh.git
    branch: master
    paths:
    - bosh-init-deployment.yml

#- name: bosh-stemcell
#  type: bosh-io-stemcell
#  source:
#    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent

- name: bosh-stemcell
  type: s3
  source:
     bucket: {{bosh_stemcells_bucket}}
     region_name: {{aws-region}}
     access_key_id: {{ci-access-key-id}}
     secret_access_key: {{ci-secret-access-key}}
     regexp: light-bosh-stemcell-(.*)-aws-xen-hvm-ubuntu-trusty-go_agent.tgz

- name: toolingbosh-deployment
  type: 18f-bosh-deployment
  source:
    target: {{masterbosh-target}}
    username: {{masterbosh-username}}
    password: {{masterbosh-password}}
    deployment: toolingbosh

- name: stagingbosh-deployment
  type: 18f-bosh-deployment
  source:
    target: {{toolingbosh-target}}
    username: {{toolingbosh-username}}
    password: {{toolingbosh-password}}
    deployment: stagingbosh

- name: productionbosh-deployment
  type: 18f-bosh-deployment
  source:
    target: {{toolingbosh-target}}
    username: {{toolingbosh-username}}
    password: {{toolingbosh-password}}
    deployment: productionbosh

- name: masterbosh-deployment
  type: bosh-init-deployment
  source:
    bucket_name: {{bosh-init-bucket-name}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    region: {{aws-region}}

- name: pipeline-tasks
  type: git
  source:
    uri: https://github.com/18F/cg-pipeline-tasks.git
    branch: master

- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook-url}}

- name: cg-s3-fisma-release
  type: s3
  source:
    regexp: fisma-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-tripwire-release
  type: s3
  source:
    regexp: tripwire-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-awslogs-release
  type: s3
  source:
    regexp: awslogs-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-nessus-agent-release
  type: s3
  source:
    regexp: nessus-agent-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-newrelic-release
  type: s3
  source:
    regexp: newrelic-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-clamav-release
  type: s3
  source:
    regexp: clamav-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-snort-release
  type: s3
  source:
    regexp: snort-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-riemannc-release
  type: s3
  source:
    regexp: riemannc-(.*).tgz
    <<: *s3-release-params

- name: stagingbosh-certificate
  type: s3
  source:
    access_key_id: {{ci-access-key-id}}
    bucket: {{staging-bucket-name}}
    secret_access_key: {{ci-secret-access-key}}
    versioned_file: bosh.pem
    private: true
    region_name: {{aws-region}}

- name: productionbosh-certificate
  type: s3
  source:
    access_key_id: {{ci-access-key-id}}
    bucket: {{production-bucket-name}}
    secret_access_key: {{ci-secret-access-key}}
    versioned_file: bosh.pem
    private: true
    region_name: {{aws-region}}

- name: common-releases-master-version
  type: semver
  source:
    driver: s3
    bucket: {{common-releases-bucket}}
    key: {{common-releases-master-key}}
    access_key_id: {{common-releases-access-key-id}}
    secret_access_key: {{common-releases-secret-access-key}}
    region_name: {{aws-region}}

- name: common-releases-tooling-version
  type: semver
  source:
    driver: s3
    bucket: {{common-releases-bucket}}
    key: {{common-releases-tooling-key}}
    access_key_id: {{common-releases-access-key-id}}
    secret_access_key: {{common-releases-secret-access-key}}
    region_name: {{aws-region}}

resource_types:
- name: bosh-init-deployment
  type: docker-image
  source:
    repository: teamidefix/bosh-init-deployment-resource
- name: cg-common
  type: docker-image
  source:
    repository: 18fgsa/cg-common-resource
- name: 18f-bosh-deployment
  type: docker-image
  source:
    repository: 18fgsa/bosh-deployment-resource
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

s3-release-params: &s3-release-params
  access_key_id: {{ci-access-key-id}}
  secret_access_key: {{ci-secret-access-key}}
  bucket: {{s3-bosh-releases-bucket}}
  region_name: {{aws-region}}
  private: true
